#+TITLE: Procesos
#+AUTHOR: tano

Los procesos (o *tareas*) son instancias de programas en ejecución.

Cada proceso tiene asociado un identificador llamado *PID*.

* Clasificación

Los procesos se pueden clasificar como:

- Foreground :: o *primer plano*, son los procesos que tienen el control directo de una terminal, permitiendo que el usuario interactúe en tiempo real
- Background :: o *segundo plano*, son los procesos que se ejecutan independientemente de la terminal, dejándola libre para aceptar otro comandos

Para levantar un proceso en segundo plano hay que agregar el símbolo ~&~ después del comando, por ejemplo:

#+BEGIN_SRC shell :session clasificacion :async yes :exports both
vi &
#+END_SRC

#+RESULTS:
: [1] 31290
: [1]  + suspended (tty output)  vi

* ~top~

El comando ~top~ permite controlar los procesos y las estadísticas del uso de los recursos del sistema en tiempo real (por defecto cada 3 segundos).

[[file:assets/top.png]]

** Columnas

- =PID= :: identificador de proceso (=Process ID=)
- =USER= :: usuario dueño del proceso
- =PR= :: prioridad del proceso (=Priority=)
- =NI= :: valor de amabilidad del proceso (=Niceness=)
- =VIRT= :: memoria virtual total usada por el proceso (=Virtual Memory=)
- =RES= :: memoria física actualmente usada por el proceso (=Resident Memory=)
- =SHR= :: memoria compartida usada por el proceso (=Shared=)
- =S= :: estado del proceso (=State=)
- =%CPU= :: porcentaje de CPU usado por el proceso
- =%MEM= :: porcentaje de memoria física usada por el proceso
- =TIME+= :: tiempo total de CPU utilizado por el proceso desde que inició
- =COMMAND= :: comando que inició el proceso 

** Prioridades de procesos

*** Prioridad base

Es un valor predeterminado que el sistema operativo Linux asigna a todos los procesos de usuario cuando se crean.

Suele ser =20= por defecto.

*** Amabilidad

Representado por la columna =NI=, es un valor entre =-20= y =19= que el usuario puede ajustar para influir en cierta medida en la prioridad efectiva de un proceso.

Su valor por defecto suele ser =0=, pero algunos sistemas UNIX suelen ajustarlo a =5= solo para los procesos en segundo plano para asegurarse que no interfieran con el resto.

*** Prioridad efectiva

Representado por la columna =PR=, es un valor que determina cuánto tiempo de CPU recibe el proceso: *valores más bajos indican mayor prioridad*.

Se calcula con la formula =Prioridad efectiva = Prioridad base + Amabilidad= o =PR = PB + NI=.

** Estados comunes

Los códigos de estados comunes (que podemos encontrar en el comando ~top~) son:

- =R= :: ejecutándose (=Running=)
- =S= :: durmiendo (=Sleeping=)
- =D= :: sueño ininterrumpible por operaciones de E/S (=Disk sleep=)
- =Z= :: zombi (=Zombie=)
- =T= :: suspendido (=Terminated=)
- =I= :: inactivo (=Idle=) 

* ~ps~

El comando ~ps~ se utiliza para mostrar información sobre los procesos en ejecución en el sistema para ese instante.

#+begin_src shell :exports both
ps
#+end_src

#+RESULTS:
|   PID | TTY |     TIME | CMD    |
|  6391 | ?   | 00:00:00 | bash   |
|  6392 | ?   | 00:00:00 | ps     |

** Opciones

*** ~-e~ o ~-A~

Con la opción ~-e~ o ~-A~ (/all processes/ o /todos los procesos/) podemos ver todos los procesos del sistema

#+begin_src shell :exports both
ps -e
#+end_src

#+RESULTS:
|   PID | TTY   |     TIME | CMD                               |         |     |
|     1 | ?     | 00:00:01 | init                              |         |     |
|     2 | ?     | 00:00:00 | kthreadd                          |         |     |
| ...   | ...   | ...      | ...                               | ...     | ... |

*** ~aux~

Con la opción ~aux~ podemos ver todos los procesos con detalles adicionales, incluyendo procesos no asociados con una terminal.

#+begin_src shell
ps aux
#+end_src

Es una combinación de los indicadores:

- ~a~ :: muestra todos los procesos asociados con cualquier terminal
- ~u~ :: muestra informacion detallada sobre los procesos, incluyendo el nombre del usuario propietario
- ~x~ :: muestra procesos que no están asociados con ninguna terminal

* ~pstree~

El comando ~pstree~ se usa para mostrar una representación jerárquica de los procesos en ejecución en el sistema.

Esta representación se organiza en forma de un árbol, donde cada proceso se muestra como un nodo, y los procesos secundarios se muestran como subnodos debajo de sus procesos padres correspondientes.

#+begin_src shell
pstree
#+end_src

* ~kill~

El comando ~kill~ se utiliza para enviar señales a procesos específicos, lo que puede resultar en la terminación de esos procesos, la modificación de su comportamiento o la ejecución de otras acciones según la señal enviada.

** Señales

Para ver los tipos de señales disponibles se puede utilizar la opción ~-l~ del comando.

#+begin_src shell :exports both
kill -l
#+end_src

#+RESULTS:
| 1) SIGHUP       | 2) SIGINT       | 3) SIGQUIT      | 4) SIGILL       | 5) SIGTRAP      |
| 6) SIGABRT      | 7) SIGBUS       | 8) SIGFPE       | 9) SIGKILL      | 10) SIGUSR1     |
| 11) SIGSEGV     | 12) SIGUSR2     | 13) SIGPIPE     | 14) SIGALRM     | 15) SIGTERM     |
| 16) SIGSTKFLT   | 17) SIGCHLD     | 18) SIGCONT     | 19) SIGSTOP     | 20) SIGTSTP     |
| 21) SIGTTIN     | 22) SIGTTOU     | 23) SIGURG      | 24) SIGXCPU     | 25) SIGXFSZ     |
| 26) SIGVTALRM   | 27) SIGPROF     | 28) SIGWINCH    | 29) SIGIO       | 30) SIGPWR      |
| 31) SIGSYS      | 34) SIGRTMIN    | 35) SIGRTMIN+1  | 36) SIGRTMIN+2  | 37) SIGRTMIN+3  |
| 38) SIGRTMIN+4  | 39) SIGRTMIN+5  | 40) SIGRTMIN+6  | 41) SIGRTMIN+7  | 42) SIGRTMIN+8  |
| 43) SIGRTMIN+9  | 44) SIGRTMIN+10 | 45) SIGRTMIN+11 | 46) SIGRTMIN+12 | 47) SIGRTMIN+13 |
| 48) SIGRTMIN+14 | 49) SIGRTMIN+15 | 50) SIGRTMAX-14 | 51) SIGRTMAX-13 | 52) SIGRTMAX-12 |
| 53) SIGRTMAX-11 | 54) SIGRTMAX-10 | 55) SIGRTMAX-9  | 56) SIGRTMAX-8  | 57) SIGRTMAX-7  |
| 58) SIGRTMAX-6  | 59) SIGRTMAX-5  | 60) SIGRTMAX-4  | 61) SIGRTMAX-3  | 62) SIGRTMAX-2  |
| 63) SIGRTMAX-1  | 64) SIGRTMAX    |                 |                 |                 |

Por defecto ~kill~ utiliza la señal =SIGTERM= (=15=) que permite al proceso una terminación ordenada.

Además, las señales de relevancia para nosotros son:

- =SIGINT= :: para interrumpir procesos (=2=)
- =SIGKILL= :: para forzar la terminación de procesos (=9=)

** Uso

Para enviar una señal a un proceso, se debe utilizar la familia de opciones ~-<N>~ donde =N= es el número de señal.

Por ejemplo, para terminar abruptamente (señal =SIGKILL=) el proceso de ~vi~ que se creó al principio (de PID =31290=), se utiliza como opción el número correspondiente a esa señal (=9=), y como argumento el PID del proceso:

#+begin_src shell :session procesos :exports both
kill -9 31290
#+end_src

#+RESULTS:
: [1]  + killed     vi

* ~nice~

El comando ~nice~ se utiliza para iniciar un nuevo proceso con un valor de amabilidad (=NI=) ajustado, afectando su prioridad efectiva (=PR=).

El valor de amabilidad a usar se especifica con la opción ~-n~, sino se usa el valor por defecto =10=.

** Uso

Para iniciar un proceso con un valor de amabilidad de =-10=:

#+begin_src shell
sudo nice -n -10 comando
#+end_src

Se requiere permisos de superusuario para establecer valores de amabilidad negativos, dado que se está incrementando la prioridad del proceso, lo cual generalmente está restringido a usuarios con privilegios administrativos.

** Prueba

Para comprobarlo, podemos lanzar dos proceso iguales y utilizar el comando ~nice~ solo en uno:

#+begin_src shell :session nice1 :async yes :results none
sleep 10
#+end_src

#+begin_src shell :session nice2 :async yes :results none
sudo nice -n 10 sleep 10
#+end_src

#+begin_src shell :exports both
ps -o pid,ni,cmd -C sleep
#+end_src

#+RESULTS:
|   PID | NI | CMD   |     |
| 32438 |  0 | sleep |  10 |
| 32468 | 10 | sleep |  10 |

Como observamos en la segunda columna, el primer proceso fue lanzado con la amabilidad por defecto =0=, mientras que el segundo con la amabilidad especificada de =10=.
